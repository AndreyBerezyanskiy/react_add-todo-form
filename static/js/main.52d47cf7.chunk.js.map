{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","email","name","className","href","TodoInfo","todo","title","completed","id","cn","TodoList","todos","map","username","copyTodosFromServer","userId","App","users","useState","todosForRender","setTodosForRender","selectedUserName","setSelectedUserName","titleForTodo","setTitleForTodo","errorTitle","setErrorTitle","isEmptyUser","setIsEmptyUser","preparedTodos","usersFromServer","find","onSubmit","event","preventDefault","prevState","idTodos","person","forEach","push","Math","max","htmlFor","type","placeholder","value","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.52d47cf7.chunk.js","sourcesContent":["import React from 'react';\n\ninterface Props {\n  user: User;\n}\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { email, name } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport { UserInfo } from '../UserInfo';\n\ninterface Props {\n  todo: FullTodo;\n}\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    title,\n    completed,\n    user,\n    id,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={cn(\n        'TodoInfo',\n        { 'TodoInfo--completed': completed },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && (\n        <UserInfo user={user} />\n      )}\n    </article>\n  );\n};\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo';\n\ninterface Props {\n  todos: FullTodo[]\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo key={todo.id} todo={todo} />\n    ))}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import './App.scss';\nimport React, { useState } from 'react';\nimport { TodoList } from './components/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nconst copyTodosFromServer = [...todosFromServer];\n\nconst prepareTodos = (todos: Todo[], users: User[]): FullTodo[] => (\n  todos.map(todo => ({\n    ...todo,\n    user: users.find(user => user.id === todo.userId) || null,\n  }))\n);\n\nexport const App: React.FC = () => {\n  const [todosForRender, setTodosForRender] = useState<Todo[]>(\n    copyTodosFromServer,\n  );\n  const [selectedUserName, setSelectedUserName] = useState('');\n  const [titleForTodo, setTitleForTodo] = useState('');\n  const [errorTitle, setErrorTitle] = useState(true);\n  const [isEmptyUser, setIsEmptyUser] = useState(true);\n\n  const preparedTodos = prepareTodos(todosForRender, usersFromServer);\n\n  const handleInputTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitleForTodo(event.target.value);\n    setErrorTitle(true);\n  };\n\n  const handleChooseUser = ((event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUserName(event.target.value);\n    setIsEmptyUser(true);\n  });\n\n  const handleAddTodo = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!titleForTodo) {\n      setErrorTitle(false);\n    }\n\n    if (!selectedUserName) {\n      setIsEmptyUser(false);\n    }\n\n    setTodosForRender(prevState => {\n      const idTodos: number[] = [];\n      const user = usersFromServer.find(\n        person => person.name === selectedUserName,\n      );\n\n      if (!user || !titleForTodo) {\n        return [...prevState];\n      }\n\n      prevState.forEach(todo => idTodos.push(todo.id));\n\n      setTitleForTodo('');\n      setSelectedUserName('');\n\n      return (\n        [...prevState, {\n          id: Math.max(...idTodos) + 1,\n          title: titleForTodo,\n          completed: false,\n          userId: user.id,\n        }]);\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form onSubmit={handleAddTodo}>\n        <div className=\"field\">\n\n          <label htmlFor=\"\">\n            {'Title: '}\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title\"\n              value={titleForTodo}\n              onChange={handleInputTitle}\n            />\n          </label>\n\n          {!errorTitle && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label>\n            {'User: '}\n            <select\n              data-cy=\"userSelect\"\n              value={selectedUserName}\n              onChange={handleChooseUser}\n            >\n              <option value=\"\" disabled>Choose a user</option>\n\n              {usersFromServer.map(user => (\n                <option value={user.name} key={user.id}>\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </label>\n\n          {!isEmptyUser && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={preparedTodos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}